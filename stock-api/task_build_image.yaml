apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build-stock-api-image
spec:
  inputs:
    resources:
      - name: source
        type: git
    params:
      - name: context-dir
        description: The context dir of the project containing the Maven pom.xml file
        default: stock-api
      - name: docker-file
        description: Name of the Docker file to use
        default: Dockerfile
      - name: container-image
        description: Name of the container image to use
        default: stock-api
      - name: tls-verify
        description: tls verify
        type: string
        default: "false"
      - name: base-version
        description: Base product version
        type: string
        default: "1.0"
  results:
    - name: timestamp
      description: Current timestamp
    - name: buildId
      description: BuildId                     
  steps:
    - name: get-timestamp
      image: bash:latest
      script: |
        #!/usr/bin/env bash
        ts=`date "+%Y%m%d-%H%M%S"`
        echo "Current Timestamp: ${ts}"
        echo ${ts} | tee $(results.timestamp.path)
    - name: get-buildid
      image: bash:latest
      script: |
        #!/usr/bin/env bash
        ts=`cat $(results.timestamp.path)`
        buildId=$(inputs.params.base-version)-${ts}
        echo ${buildId} | tee $(results.buildId.path)
        echo "Build ID: ${buildId}"  
    - name: list-project-folder
      image: busybox
      command: ["ls", "-ltr", "/workspace/source/$(inputs.params.context-dir)"]
    - name: build-jar-file
      image: docker.io/maven:3.6.3-openjdk-15
      workingDir: "/workspace/source/$(inputs.params.context-dir)"
      script: |
         #!/usr/bin/env bash
         buildId=`cat $(results.buildId.path)`
         cmd="mvn -DbuildId=${buildId} -DskipTests -ntp clean package"
         echo "Command: ${cmd}"
         ${cmd}
    - name: list-project-folder-after-build
      image: quay.io/buildah/stable
      workingDir: "/workspace/source/$(inputs.params.context-dir)"
      command:
        - "ls"
      args:
        - "-alR"
        - "."      
    - name: build-container-image
      image: quay.io/buildah/stable
      workingDir: "/workspace/source/$(inputs.params.context-dir)"
      command:
        - sh
        - -c
        - "cd /workspace/source/$(inputs.params.context-dir) && \
           buildah bud --tls-verify=$(inputs.params.tls-verify) --layers --storage-driver=vfs -f $(inputs.params.docker-file) -t $(inputs.params.container-image) ."
      securityContext:
        runAsUser: 0
        privileged: true
      volumeMounts:
        - name: varlibc
          mountPath: /var/lib/containers        
    - name: list-image
      image: quay.io/buildah/stable
      workingDir: "/workspace/source/$(inputs.params.context-dir)"
      command:
        - "buildah"
      args:
        - "images"
        - "--storage-driver=vfs"
      securityContext:
        runAsUser: 0
        privileged: true
      volumeMounts:
        - name: varlibc
          mountPath: /var/lib/containers        
    - name: push-image
      env:
      - name: REGISTRY_AUTH_FILE
        value: /workspace/.docker/config.json    
      image: quay.io/buildah/stable
      workingDir: "/workspace/source/$(inputs.params.context-dir)"
      command:
        - "buildah"
      args:
        - "push"
        - "--storage-driver=vfs"
        - "--tls-verify=$(inputs.params.tls-verify)"
        - "$(inputs.params.container-image):latest"
        - "docker://docker.io/mmehra/${inputs.params.container-image}:latest"
      securityContext:
        runAsUser: 0
        privileged: true
      volumeMounts:
        - name: varlibc
          mountPath: /var/lib/containers 
        - name: docker-secret
          mountPath: /workspace/.docker                  
  volumes:
    - name: varlibc
      emptyDir: {}
    - name: docker-secret
      secret:
        secretName: regcred
        items:
          - key: .dockerconfigjson
            path: config.json      